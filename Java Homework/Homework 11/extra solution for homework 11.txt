import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Scanner;
import java.util.Set;

public class Email implements Comparable<Email> {

        private String emailStr;

        Email() {
        }

        Email(String str) {

                emailStr = str;

        }

        public String parseEmailName() {

                String name;

                int pos = emailStr.indexOf('@');

                name = emailStr.substring(0, pos);

                return name;

        }

        public String parseCompanyName() {

                String company;

                int pos = emailStr.indexOf('@');

                int dot = emailStr.lastIndexOf('.');

                company = emailStr.substring(pos + 1, dot);

                return company;

        }

        public String parseExtension() {

                String ext;

                int dot = emailStr.lastIndexOf('.');

                ext = emailStr.substring(dot + 1, emailStr.length());

                return ext;

        }

        @Override
        public int compareTo(Email e) {
                int val = parseCompanyName().compareTo(e.parseCompanyName());
                if (val == 0) {
                        return parseEmailName().compareTo(e.parseEmailName());
                }
                return val;
        }

        @Override
        public String toString() {
                return parseCompanyName() + "\t" + parseEmailName();
        }

        public static void main(String[] args) throws FileNotFoundException {
                Scanner sc = new Scanner(new File("attendance.txt"));
                ArrayList<Email> emails = new ArrayList<>();

                while (sc.hasNextLine()) {
                        String line = sc.nextLine();
                        Email e = new Email(line);
                        emails.add(e);
                }

                Collections.sort(emails);

                HashMap<String, Integer> map = new HashMap<>();
                for (Email e : emails) {
                        String name = e.parseCompanyName();
                        if (map.containsKey(name)) {
                                map.put(name, map.get(name) + 1);
                        } else {
                                map.put(name, 1);
                        }
                        System.out.println(e);
                }

                System.out.println("\n\n************Histogram************\n\n");
                int max = -1;
                for (int val : map.values()) {
                        if (val > max)
                                max = val;
                }

                Set<String> keys = map.keySet();

                for (int i = max; i > 0; i--) {
                        String opLine = String.format("%-3d", i) + "| ";

                        for (String s : keys) {
                                if (map.get(s) >= (i)) {
                                        opLine = opLine + " * " + " | ";
                                } else {
                                        opLine = opLine + "   " + " | ";
                                }
                        }
                        System.out.println(opLine);
                }
                for (int i = 0; i <= keys.size(); i++)
                        System.out.print("------");

                System.out.print("\n   ");
                for (String s : keys) {
                        System.out.print(String.format("%-6s", "  " + s));
                }

                System.out.println("\n\n");
                boolean flag = false;
                for (Email e : emails) {
                        if (e.parseEmailName().equals("bill.gates")) {
                                System.out.println("bill.gates attended the conference.");
                                flag = true;
                        }
                }
                if (!flag) {
                        System.out.println("bill.gates did not attend the conference.");
                }
        }

}